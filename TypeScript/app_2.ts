/*
* Los identificadores son nombres dados a elementos en un programa como variables, 
  funciones, etc.
    => Las reglas para identificadores son:
    - Los identificadores pueden incluir tanto caracteres como dígitos. Sin embargo,
      el identificador no puede comenzar con un dígito.
    - Los identificadores no pueden incluir símbolos especiales excepto el guión 
      bajo (_) o un signo de dólar ($).
    - Los identificadores no pueden ser palabras clave.
    - Deben ser únicos.
    - Los identificadores distinguen entre mayúsculas y minúsculas.
    - Los identificadores no pueden contener espacios.
    Ejemplo: firstName, first_name, num1, $result
*/

//1. Object Orientation
class Persona {
    origen():void{
        console.log("Hello World !!!");
    }
}
// Llamando al objeto creado
var objPersona = new Persona(); 
objPersona.origen();

//2. Tipos

// Any. Cualquier tipo.

//number, string, boolean, void, null y undefined.

/*  Una variable inicializada con "undefined" significa que la 
    variable no tiene un valor o un objeto asignado, mientras 
    que "null" significa que la variable se ha establecido en un
    objeto cuyo valor no está definido.
*/

//3.Aserción de tipo y scope de variable.

var str = '1' 
var str2:number = <number> <any> str   //str is now of type number 
console.log(str2)

var global_num = 12          //global variable 
class Numbers { 
   num_val = 13;             //class variable 
   static sval = 10;         //static field 
   
   storeNum():void { 
      var local_num = 14;    //local variable 
   } 
} 
console.log("Global num: "+global_num)  
console.log(Numbers.sval)   //static variable  
var obj = new Numbers(); 
console.log("Global num: "+obj.num_val) 

//4. Declaración de variables.

var name2:string = "John"; 
var score1:number = 50;
var score2:number = 42.50
var sum = score1 + score2 
console.log("name"+name) 
console.log("first score: "+score1) 
console.log("second score: "+score2) 
console.log("sum of the scores: "+sum)

//5. Tipo de operador.
//Generated by typescript 1.8.10
var num = 12;
console.log(typeof num);   //output: number

// 6. Funciones.
// - Definir una función. Tipo de retorno.
function greet():string { //the function returns a string 
    return "Hello World" 
}
function caller() { 
    var msg = greet() //function greet() invoked 
    console.log(msg) 
}
 //invoke function 
 caller()

 // - Posición de parametros.
 function test_param(n1:number,s1:string) { 
    console.log(n1) 
    console.log(s1) 
 } 
 test_param(123,"this is a string")
 
 // - Parametros opcionales.
 function disp_details(id:number,name:string,mail_id?:string) { 
    console.log("ID:", id); 
    console.log("Name",name); 
    
    if(mail_id!=undefined)  
    console.log("Email Id",mail_id); 
 }
 disp_details(123,"John");
 disp_details(111,"mary","mary@xyz.com");

 // - Parámetros de descanso. Deben de ser el mismo tipo
 function addNumbers(...nums:number[]) {  
    var i;   
    var sum:number = 0; 
    
    for(i = 0;i<nums.length;i++) { 
       sum = sum + nums[i]; 
    } 
    console.log("sum of the numbers",sum) 
 } 
 addNumbers(1,2,3) 
 addNumbers(10,10,10,10,10)

 // - Parámetros predeterminados.
 function calculate_discount(price:number,rate:number = 0.50) { 
    var discount = price * rate; 
    console.log("Discount Amount: ",discount); 
 } 
 calculate_discount(1000) 
 calculate_discount(1000,0.30)
 /* Salida.
    Discount amount : 500 
    Discount amount : 300
 */

 // NOTA: var res = new Function( [arguments] ) { ... }.

 // - Constructor de funciones.
 var myFunction = new Function("a", "b", "return a * b"); 
var x = myFunction(4, 3); 
console.log(x);

// - Recursividad.
function factorial(number:number):number {
    if (number <= 0) { // termination case
       return 1; 
    } else {     
       return (number * factorial(number - 1)); // function invokes itself
    } 
 }; 
 console.log(factorial(6)); // outputs 720 

 // - Función recursiva anónima.
(function () { 
    var x = "Hello!!";
    console.log(x); 
})()      // the function invokes itself using a pair of parentheses ()

// - Lambda. Es un mecanismo conciso para representar funciones anónimas.

// Expresión Lambda.
var foo = (x:number)=>10 + x
console.log(foo(100)) //outputs 110 

// Declaración lambda.
var foo2 = (x:number)=> {    
    x = 10 + x 
    console.log(x)  
 } 
 foo2(100)

// ** Variaciones sintácticas.
// Tipo de parámetro Inferencia
var func = (x:any)=> { /*Agregue any*/
    if(typeof x=="number") { 
       console.log(x+" is numeric") 
    } else if(typeof x=="string") { 
       console.log(x+" is a string") 
    }  
 } 
 func(12) 
 func("Tom")
 // Salida. 12 is numeric;Tom is a string

 // Paréntesis opcionales para un solo parámetro
 var display = (x3:any) => { 
    console.log("The function got "+x3) 
 } 
 display(12)

 /* Aparatos ortopédicos opcionales para una sola declaración,
    paréntesis vacíos para ningún parámetro */
var disp =()=> { 
    console.log("Function invoked"); 
    } 
    disp();