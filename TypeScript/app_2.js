/*
* Los identificadores son nombres dados a elementos en un programa como variables,
  funciones, etc.
    => Las reglas para identificadores son:
    - Los identificadores pueden incluir tanto caracteres como dígitos. Sin embargo,
      el identificador no puede comenzar con un dígito.
    - Los identificadores no pueden incluir símbolos especiales excepto el guión
      bajo (_) o un signo de dólar ($).
    - Los identificadores no pueden ser palabras clave.
    - Deben ser únicos.
    - Los identificadores distinguen entre mayúsculas y minúsculas.
    - Los identificadores no pueden contener espacios.
    Ejemplo: firstName, first_name, num1, $result
*/
//1. Object Orientation
var Persona = /** @class */ (function () {
    function Persona() {
    }
    Persona.prototype.origen = function () {
        console.log("Hello World !!!");
    };
    return Persona;
}());
// Llamando al objeto creado
var objPersona = new Persona();
objPersona.origen();
//2. Tipos
// Any. Cualquier tipo.
//number, string, boolean, void, null y undefined.
/*  Una variable inicializada con "undefined" significa que la
    variable no tiene un valor o un objeto asignado, mientras
    que "null" significa que la variable se ha establecido en un
    objeto cuyo valor no está definido.
*/
//3.Aserción de tipo y scope de variable.
var str = '1';
var str2 = str; //str is now of type number 
console.log(str2);
var global_num = 12; //global variable 
var Numbers = /** @class */ (function () {
    function Numbers() {
        this.num_val = 13; //class variable 
    }
    Numbers.prototype.storeNum = function () {
        var local_num = 14; //local variable 
    };
    Numbers.sval = 10; //static field 
    return Numbers;
}());
console.log("Global num: " + global_num);
console.log(Numbers.sval); //static variable  
var obj = new Numbers();
console.log("Global num: " + obj.num_val);
//4. Declaración de variables.
var name2 = "John";
var score1 = 50;
var score2 = 42.50;
var sum = score1 + score2;
console.log("name" + name);
console.log("first score: " + score1);
console.log("second score: " + score2);
console.log("sum of the scores: " + sum);
//5. Tipo de operador.
//Generated by typescript 1.8.10
var num = 12;
console.log(typeof num); //output: number
// 6. Funciones.
// - Definir una función. Tipo de retorno.
function greet() {
    return "Hello World";
}
function caller() {
    var msg = greet(); //function greet() invoked 
    console.log(msg);
}
//invoke function 
caller();
// - Posición de parametros.
function test_param(n1, s1) {
    console.log(n1);
    console.log(s1);
}
test_param(123, "this is a string");
// - Parametros opcionales.
function disp_details(id, name, mail_id) {
    console.log("ID:", id);
    console.log("Name", name);
    if (mail_id != undefined)
        console.log("Email Id", mail_id);
}
disp_details(123, "John");
disp_details(111, "mary", "mary@xyz.com");
// - Parámetros de descanso. Deben de ser el mismo tipo
function addNumbers() {
    var nums = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nums[_i] = arguments[_i];
    }
    var i;
    var sum = 0;
    for (i = 0; i < nums.length; i++) {
        sum = sum + nums[i];
    }
    console.log("sum of the numbers", sum);
}
addNumbers(1, 2, 3);
addNumbers(10, 10, 10, 10, 10);
// - Parámetros predeterminados.
function calculate_discount(price, rate) {
    if (rate === void 0) { rate = 0.50; }
    var discount = price * rate;
    console.log("Discount Amount: ", discount);
}
calculate_discount(1000);
calculate_discount(1000, 0.30);
/* Salida.
   Discount amount : 500
   Discount amount : 300
*/
// NOTA: var res = new Function( [arguments] ) { ... }.
// - Constructor de funciones.
var myFunction = new Function("a", "b", "return a * b");
var x = myFunction(4, 3);
console.log(x);
// - Recursividad.
function factorial(number) {
    if (number <= 0) { // termination case
        return 1;
    }
    else {
        return (number * factorial(number - 1)); // function invokes itself
    }
}
;
console.log(factorial(6)); // outputs 720 
// - Función recursiva anónima.
(function () {
    var x = "Hello!!";
    console.log(x);
})(); // the function invokes itself using a pair of parentheses ()
// - Lambda. Es un mecanismo conciso para representar funciones anónimas.
// Expresión Lambda.
var foo = function (x) { return 10 + x; };
console.log(foo(100)); //outputs 110 
// Declaración lambda.
var foo2 = function (x) {
    x = 10 + x;
    console.log(x);
};
foo2(100);
// ** Variaciones sintácticas.
// Tipo de parámetro Inferencia
var func = function (x) {
    if (typeof x == "number") {
        console.log(x + " is numeric");
    }
    else if (typeof x == "string") {
        console.log(x + " is a string");
    }
};
func(12);
func("Tom");
// Salida. 12 is numeric;Tom is a string
// Paréntesis opcionales para un solo parámetro
var display = function (x3) {
    console.log("The function got " + x3);
};
display(12);
/* Aparatos ortopédicos opcionales para una sola declaración,
   paréntesis vacíos para ningún parámetro */
var disp = function () {
    console.log("Function invoked");
};
disp();
// Prototype
/* var emp = new employee(123,"Smith")
 employee.prototype.email = "smith@abc.com"
 
 console.log("Employee 's Id: "+emp.id)
 console.log("Employee's name: "+emp.name)
 console.log("Employee's Email ID: "+emp.email)*/
// Precision
var num5 = new Number(7.123456);
console.log(num5.toPrecision());
// ToFixed
var num3 = 177.234;
console.log("num3.toFixed() is " + num3.toFixed());
console.log("num3.toFixed(2) is " + num3.toFixed(2));
console.log("num3.toFixed(6) is " + num3.toFixed(6));
/*num3.toFixed() is 177
num3.toFixed(2) is 177.23
num3.toFixed(6) is 177.234000*/
// 7. Cadenas.
// https://www.tutorialspoint.com/typescript/typescript_strings.htm
// 8. Array
// - Array simple.
var alphas;
alphas = ["1", "2", "3", "4"];
console.log(alphas[0]);
console.log(alphas[1]);
// - declaración de declaración única e inicialización.
var nums = [1, 2, 3, 3];
console.log(nums[0]);
console.log(nums[1]);
console.log(nums[2]);
console.log(nums[3]);
// - Objeto de matriz
var arr_names = new Array(4);
for (var i = 0; i < arr_names.length; i++) {
    arr_names[i] = i * 2;
    console.log(arr_names[i]);
}
// - Array Constructor acepta valores separados por comas
var names = new Array("Mary", "Tom", "Jack", "Jill");
for (var i = 0; i < names.length; i++) {
    console.log(names[i]);
}
// - Metodos de la matriz
// https://www.tutorialspoint.com/typescript/typescript_arrays.htm
// - Desestructuración de matrices
// var arr:number[] = [12,13] 
// var[x,y] = arr 
// console.log(x) 
// console.log(y)
// - Array Traversal usando for ... in loop
var j;
var nums = [1001, 1002, 1003, 1004];
for (j in nums) {
    console.log(nums[j]);
}
// - Array de 2 dimensiones.
var multi = [[1, 2, 3], [23, 24, 25]];
console.log(multi[0][0]);
console.log(multi[0][1]);
console.log(multi[0][2]);
console.log(multi[1][0]);
console.log(multi[1][1]);
console.log(multi[1][2]);
// Pasando un array por función
var names = new Array("Mary", "Tom", "Jack", "Jill");
function disp2(arr_names) {
    for (var i = 0; i < arr_names.length; i++) {
        console.log(names[i]);
    }
}
disp2(names);
// Retorno de un array en una función
function disp3() {
    return new Array("Mary", "Tom", "Jack", "Jill");
}
var nums8 = disp3();
for (var p in nums8) {
    console.log(nums8[i]);
}
